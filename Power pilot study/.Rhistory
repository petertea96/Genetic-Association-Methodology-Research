}
which_SNP = which(Pval.list==min(Pval.list))
corrected_pvalue = number.sites*min(Pval.list)
myresult = list(corrected_pvalue, which_SNP, Pval.list)
return(myresult) #Return correction factor
}
for(h in 1:16){
P1 = data[,h]
p.val.pheno1.SLT = get.min.pval(data=data[,31:ncol(data)], phenotype=P1)
Phenotype1_Results_SLT[index,2+h]=   p.val.pheno1.SLT[[1]]
}
index=1
for(h in 1:16){
P1 = data[,h]
p.val.pheno1.SLT = get.min.pval(data=data[,31:ncol(data)], phenotype=P1)
Phenotype1_Results_SLT[index,2+h]=   p.val.pheno1.SLT[[1]]
}
Phenotype1_Results_SLT
data[,1]
data[,31:ncol(data)]
Phenotype1_Results_SLT = data.frame(Rep. = integer(), Method = character(), stringsAsFactors = FALSE )
data = read.table(table_name)
G=data[,33:ncol(data)]
K=ncol(data)-32
nidex
index
for(h in 1:16){
P1 = data[,h]
p.val.pheno1.SLT = get.min.pval(data=data[,31:ncol(data)], phenotype=P1)
Phenotype1_Results_SLT[index,2+h]=   p.val.pheno1.SLT[[1]]
}
Phenotype1_Results_SLT
data[,6]
a=data[,6]
K
number.sites=K
Pval.list = numeric(number.sites) #Initialize list of p-values
data=data[,31:ncol(data)]
a
phenotype=a
for(i in 1:number.sites){
x = as.factor(data[,i+2])
p.val = anova(lm(phenotype~x))[1,5] #Extract p-value.
Pval.list[i] = p.val
}
which_SNP = which(Pval.list==min(Pval.list))
corrected_pvalue = number.sites*min(Pval.list)
Pval.list
corrected_pvalue
Phenotype1_Results_SLT = data.frame(Rep. = integer(), Method = character(), stringsAsFactors = FALSE )
data = read.table(table_name)
G=data[,33:ncol(data)]
K=ncol(data)-32
for(h in 1:16){
P1 = data[,h]
p.val.pheno1.SLT = get.min.pval(data=data[,31:ncol(data)], phenotype=P1)
Phenotype1_Results_SLT[index,2+h]=   p.val.pheno1.SLT[[1]]
}
Phenotype1_Results_SLT
a=data[,4]
a
data[,31:ncol(data)]
data=data[,31:ncol(data)]
phenotype=a
number.sites = ncol(data) - 2 #Compute the number of SNP sites in the data
Pval.list = numeric(number.sites) #Initialize list of p-values
for(i in 1:number.sites){
x = as.factor(data[,i+2])
p.val = anova(lm(phenotype~x))[1,5] #Extract p-value.
Pval.list[i] = p.val
}
which_SNP = which(Pval.list==min(Pval.list))
corrected_pvalue = number.sites*min(Pval.list)
Pval.list
which_SNP
m=matrix(0, ncol=32)
m
m[2,2] =3
m=data.frame()
m
m[1,5] = 4
m
?data.frame
m=data.frame(1:32)
m
data.frame(matrix(ncol = 5, nrow = 1))
gg=data.frame(matrix(ncol = 5, nrow = 1))
gg[2,1]=2
gg
gg[4,5]=0
gg
gg[1,6]=5
gg
getwd()
list.files()
actual_common_causal = read.table("common_causal_vector_5.txt")
actual_common_causal
abc = read.table("common_causal_vector_7.txt")
abc
is.matrix(abc)
is.vector(abc)
abc
rbind(actual_common_causal,abc)
a=vector()
a=rbind(a, actual_common_causal)
a
list.files()
list.files()
j=1
Actual_rare_causal_name = paste("Actual_rare_causal_table_", j, ".txt", sep="")
data2 = read.table(Actual_rare_causal_name)
j=2
Actual_rare_causal_name = paste("Actual_rare_causal_table_", j, ".txt", sep="")
data3 = read.table(Actual_rare_causal_name)
a=rbind(data2,data3)
View(a)
data2
data3
list.files()
j=1
Chosen_common_causal_name = paste("Chosen_common_causal_", j, ".txt", sep="")
data3 = read.table(Chosen_common_causal_name)
data3
length(data3)
624/16
seq(1, 624, by=16)
seq(0, 624, by=16)
seq(1, 625, by=16)
data3[1:16]
data3[17:32]
data3
index=seq(1, length(data3) + 1, by=16)
index
Chosen_common_causal=vector()
for (i in 1:length(index)){
first=index[i]
last=index[i+1]-1
Chosen_common_causal = rbind(Chosen_common_causal,data3[first:last])
}
Chosen_common_causal=matrix()
for (i in 1:length(index)){
first=index[i]
last=index[i+1]-1
Chosen_common_causal = rbind(Chosen_common_causal,data3[first:last])
}
Chosen_common_causal=matrix(ncol=16)
for (i in 1:length(index)){
first=index[i]
last=index[i+1]-1
Chosen_common_causal = rbind(Chosen_common_causal,data3[first:last])
}
first=index[i]
last=index[i+1]-1
data3[first:last]
Chosen_common_causal=matrix(ncol=16)
data3 = read.table(Chosen_common_causal_name)
index=seq(1, length(data3) + 1, by=16)
for (i in 1:length(index)){
first=index[i]
last=index[i+1]-1
row_to_add = unname(data3[first:last])
Chosen_common_causal = rbind(Chosen_common_causal, row_to_add)
}
Chosen_common_causal
row_to_add
data3[first:last]
first
last
Chosen_common_causal=matrix(ncol=16)
Chosen_common_causal_name = paste("Chosen_common_causal_", j, ".txt", sep="")
data3 = unname(read.table(Chosen_common_causal_name))
index=seq(1, length(data3) + 1, by=16)
data3
for (i in 1:length(index)){
first=index[i]
last=index[i+1]-1
row_to_add = unname(data3[first:last])
Chosen_common_causal = rbind(Chosen_common_causal, row_to_add)
}
Chosen_common_causal=vector()
index=seq(1, length(data3) + 1, by=16)
for (i in 1:length(index)){
first=index[i]
last=index[i+1]-1
row_to_add = unname(data3[first:last])
Chosen_common_causal = rbind(Chosen_common_causal, row_to_add)
}
Chosen_common_causal
Chosen_common_causal=vector()
Chosen_common_causal_name = paste("Chosen_common_causal_", j, ".txt", sep="")
data3 = unname(read.table(Chosen_common_causal_name))
index=seq(1, length(data3) + 1, by=16)
index
for (i in 1:length(index)){
first=index[i]
last=index[i+1]-1
row_to_add = data3[first:last]
Chosen_common_causal = rbind(Chosen_common_causal, row_to_add)
}
Chosen_common_causal
row_to_add
Chosen_common_causal=vector()
Chosen_common_causal_name = paste("Chosen_common_causal_", j, ".txt", sep="")
j=1
Chosen_common_causal_name = paste("Chosen_common_causal_", j, ".txt", sep="")
data3 = unname(read.table(Chosen_common_causal_name))
index=seq(1, length(data3) + 1, by=16)
data3
data3[1:16]
length(data3)
data3[1]
data3[1,]
data3[,1]
is.matrix(data3)
is.vector(data3)
typeof(data())
typeof(data3
)
data3[[1]]
data3[[1]][1]
data3[[1]][2]
Chosen_common_causal=vector()
data3 = read.table(Chosen_common_causal_name)
data3
index=seq(1, length(data3) + 1, by=16)
index
i=1
first=index[i]
last=index[i+1]-1
first
last
row_to_add = data3[first:last]
row_to_add
data3 = as.vector(read.table(Chosen_common_causal_name))
index=seq(1, length(data3) + 1, by=16)
i=1
row_to_add = data3[first:last]
row_to_add
Chosen_common_causal=vector()
data3 = read.table(Chosen_common_causal_name)
unlist(data3)
df <- data.frame(matrix(unlist(data3), nrow=length(data3), byrow=T))
df
index=seq(1, length(data3) + 1, by=16)
df <- data.frame(matrix(unlist(data3), nrow=length(index), byrow=T))
index=seq(1, length(data3) + 1, by=16)
index
length(index)
length(data3)
length(data3)/16
df <- data.frame(matrix(unlist(data3), nrow=length(data3)/16, byrow=T))
df
df <- data.frame(matrix(unlist(data3), nrow=length(data3)/16, byrow=FALSE))
df
data3
read.line(Chosen_common_causal_name)
read.lines(Chosen_common_causal_name)
readLines(Chosen_common_causal_name)
data3 = read.table(Chosen_common_causal_name)
data3
data3[1]
?read.table
scan(Chosen_common_causal_name)
a=scan(Chosen_common_causal_name)
a[1]
a[2]
a[3]
a[4]
a[5]
a[6]
a[7]
a[8]
a[9]
length(a)
a
1248/16
df <- data.frame(matrix(data3), nrow=length(data3)/16, byrow=TRUE))
df <- data.frame(matrix(data3), nrow=length(data3)/16, byrow=TRUE)
df
data3
data3=scan(Chosen_common_causal_name)
data3
df <- data.frame(matrix(data3), nrow=length(data3)/16, byrow=TRUE)
df
df <- data.frame(data3, nrow=length(data3)/16, byrow=TRUE)
df
?data.frame
?as.data.frame
df <- as.data.frame(data3, nrow=length(data3)/16, byrow=TRUE)
df
df <- as.data.frame(data3, nrow=length(data3)/16, ncol=16, byrow=TRUE)
df
df <- as.matrix(data3, nrow=length(data3)/16, ncol=16, byrow=TRUE)
df
df <- matrix(data3, nrow=length(data3)/16, ncol=16, byrow=TRUE)
df
install.packages("caret")
install.packages("kernlab")
install.packages('e1071', dependencies=TRUE)
library(caret)
library(kernlab)
data(spam)
folds = createFolds(y = spam$type, k = 10,
list = TRUE, returnTrain = TRUE)
folds
sapply(folds, length)
length(spam$type)
folds[[2]][1:10]
getwd()
Actual_common_causal = read.table("Aggregate_Actual_common_causal_vector.txt")
Actual_rare_causal = read.table("Aggregate_Actual_rare_causal_table.txt")
nrow(Actual_common_causal)
nrow(Actual_rare_causal)
Actual_common_causal = read.table("Aggregate_Actual_common_causal_vector.txt")
Actual_rare_causal = read.table("Aggregate_Actual_rare_causal_table.txt")
nrow(Actual_common_causal)
Actual_common_causal = read.table("Aggregate_Actual_common_causal_vector.txt")
nrow(Actual_common_causal)
Actual_rare_causal = read.table("Aggregate_Actual_rare_causal_table.txt")
nrow(Actual_rare_causal)
setwd("C:/Users/Peter/Documents/Uottawa/2018 - 2019 Honour's project/Cluster files/Final codes/Genetic-Association-Methodology-Research/Power pilot study")
Actual_common_causal = read.table("Aggregate_Actual_common_causal_vector.txt")
Actual_rare_causal = read.table("Aggregate_Actual_rare_causal_table.txt")
Chosen_common_causal = scan("Aggregate_Chosen_common_causal.txt")
nrow(Actual_common_causal)
nrow(Actual_rare_causal)
setwd("C:/Users/Peter/Documents/Uottawa/2018 - 2019 Honour's project/Cluster files/Final codes/Genetic-Association-Methodology-Research/Power pilot study")
Actual_common_causal = read.table("Aggregate_Actual_common_causal_vector.txt")
Actual_rare_causal = read.table("Aggregate_Actual_rare_causal_table.txt")
nrow(Actual_common_causal)
nrow(Actual_rare_causal)
Chosen_common_causal = scan("Aggregate_Chosen_common_causal.txt")
63424/16
Chosen_common_causal = scan("Aggregate_Chosen_common_causal.txt")
df1 <- matrix(Chosen_common_causal, nrow=length(Chosen_common_causal)/16, ncol=16, byrow=TRUE)
View(df1)
Chosen_rare_causal = scan("Aggregate_Chosen_rare_causal.txt")
df2 <- matrix(Chosen_rare_causal, nrow=length(Chosen_rare_causal)/16, ncol=16, byrow=TRUE)
View(df2)
Beta = seq(from=0.25, to = 1, by = 0.05)
a= as.character(Beta)
a
colnames(df1) = a
df1
colnames(df2) = mynames
mynames = as.character(Beta)
colnames(df1) = mynames
colnames(df2) = mynames
a=cbind(c(1,2), c(3,4))
a
a==0
b = a==0
b
Actual_common_causal
Actual_common_causal = read.table("Aggregate_Actual_common_causal_vector.txt")
Actual_common_causal[1]
Actual_common_causal[1,1]
head(Actual_common_causal)
P1_results=matrix()
for (i in 1:2){
real_common_causal = Actual_common_causal[i,1]
to_test = df1[i,]
results = (to_test == real_common_causal)
P1_results = rbind(P1_results, results)
}
real_common_causal = Actual_common_causal[i,1]
to_test = df1[i,]
to_test
results = (to_test == real_common_causal)
results
P1_results = rbind(P1_results, results)
P1_results=matrix()
P1_results
?matrix
P1_results=matrix(nrow=1, ncol=16)
P1_results
real_common_causal = Actual_common_causal[i,1]
to_test = df1[i,]
results = (to_test == real_common_causal)
P1_results = rbind(P1_results, results)
P1_results
results = (to_test == real_common_causal)
name(results) = rowname
results
name(results) = "gg"
nrow(Actual_common_causal)
nrow(Actual_rare_causal)
nrow(df1)
nrow(df2)
P1_results=matrix(nrow=1, ncol=16)
for (i in 1:nrow(Actual_common_causal)){
real_common_causal = Actual_common_causal[i,1]
to_test = df1[i,]
results = (to_test == real_common_causal)
P1_results = rbind(P1_results, results)
}
head(P1_results)
P1_results[-1,]
head(P1_results[-1,])
P1_results = P1_results[-1,]
head(P1_results)
rownames(P1_results) =
row_name = paste("iteration", i, sep = " ")
rownames(P1_results) =
row_name = paste("iteration", i, sep = " ")
rownames(P1_results) =
row_name = paste("iteration", 1, sep = " ")
rownames(P1_results) =
row_name = paste("iteration", 1, sep = " ")
row_name = paste("iteration", 1, sep = " ")
row_name
?rep
row_name = paste("iteration", rep(10), sep = " ")
row_name
row_name = paste("iteration", 1:10, sep = " ")
row_name
nrow(Actual_rare_causal)
row_name = paste("Iteration", 1:3964, sep = " ")
rownames(P1_results) = row_name
head(P1_results)
a=c(TRUE, FALSE, FALSE)
sum(a)
colSums(P1_results)
n = nrow(df2)
1:n
common_causal_success = colSums(P1_results)/n
names(common_causal_success) = mynames
common_causal_success
Actual_rare_causal
i=1
real_actual_causal_vector = Actual_rare_causal[i,1]
real_actual_causal_vector
real_actual_causal_vector = Actual_rare_causal[i,]
real_actual_causal_vector
to_test = df2[i,]
to_test
results = (to_test %in% real_actual_causal_vector)
results
P2_results=matrix(nrow=1, ncol=16)
P2_results=matrix(nrow=1, ncol=16)
for (i in 1:n){
real_actual_causal_vector = Actual_rare_causal[i,]
to_test = df2[i,]
#returns a TRUE element if the chosen rare causal is in the vector of actual rare causals.
results = (to_test %in% real_actual_causal_vector)
P2_results = rbind(P2_results, results)
}
head(P2_results)
P2_results = P2_results[-1,]
P2_results
i=1
real_actual_causal_vector = Actual_rare_causal[i,]
real_actual_causal_vector
to_test = df2[i,]
to_test
results = (to_test %in% real_actual_causal_vector)
results
P2_results = rbind(P2_results, results)
P2_results=matrix(nrow=1, ncol=16)
for (i in 1:n){
real_actual_causal_vector = Actual_rare_causal[i,]
to_test = df2[i,]
#returns a TRUE element if the chosen rare causal is in the vector of actual rare causals.
results = (to_test %in% real_actual_causal_vector)
P2_results = rbind(P2_results, results)
}
head(P2_results)
P2_results = P2_results[-1,]
head(P2_results)
nrow(P2_results)
head(P2_results)
nrow(P2_results)
rownames(P2_results) = row_name
rare_causal_success = colSums(P2_results)/n
names(rare_causal_success) = mynames
rare_causal_success
common_causal_success
list.files()
P1_pvalues = read.table("Aggregate_Pheno1Results.txt")
head(P1_pvalues)
nrow(P1_pvalues)
P1_pvalues = read.table("Aggregate_Pheno1Results.txt", na.omit=TRUE)
?read.table
P1_pvalues = [complete.cases(P1_pvalues),]
P1_pvalues = P1_pvalues[complete.cases(P1_pvalues),]
nrow(P1_pvalues)
head(P1_pvalues)
tester = P1_pvalues[1:5,]
tester
tester < 0.05
a = which(tester < 0.05)
tester
P1_pvalues[-c(1,2),]
P1_pvalues_which_significant = which(P1_pvalues[-c(1,2),] < 0.05)
ncol(P1_pvalues)
P1_pvalues = read.table("Aggregate_Pheno1Results.txt")
P1_pvalues = P1_pvalues[complete.cases(P1_pvalues),]
nrow(P1_pvalues)
P1_pvalues_which_significant = which(P1_pvalues[,-c(1,2)] < 0.05)
nrow(P1_pvalues_which_significant)
P1_pvalues_which_significant
P1_pvalues_which_significant = (P1_pvalues[,-c(1,2)] < 0.05)
nrow(P1_pvalues_which_significant)
P1_pvalues_which_significant
rownames(P1_pvalues_which_significant) = row_name
colnames(P1_pvalues_which_significant) = mynames
View(P1_pvalues_which_significant)
P1_success = colSums(P1_pvalues_which_significant)/n
names(P1_success) = mynames
P1_success
P2_pvalues = read.table("Aggregate_Pheno2Results.txt")
P2_pvalues = P2_pvalues[complete.cases(P2_pvalues),]
